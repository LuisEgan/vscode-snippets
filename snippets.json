{
  "Get component props": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "constprops",
    "body": ["const {$1} = props"],
    "description": "const props"
  },

  "useEffect": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ussf",
    "body": ["useEffect( () => {", " ${2}", "}, [${1}])"],
    "description": "react useEffect hook"
  },

  "useState": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "usst",
    "body": [
      "const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState<${2}>(${3})"
    ],
    "description": "react useState hook"
  },

  "reactComponent": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "reactcomponent",
    "body": [
      "const ${1} = () => {",
      "return (",
      "<div>",
      "</div>",
      ")}\n",
      "export default ${1}"
    ],
    "description": "react component without props"
  },

  "reactComponentWithProps": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "reactcomponentprops",
    "body": [
      "interface I${1} { ${3} }\n",
      "const ${1} = (props: I${1}) => {",
      "const { ${2} } = props;\n",
      "return (",
      "<div>",
      "</div>",
      ")}\n",
      "export default ${1}"
    ],
    "description": "react component with props"
  },

  "asyncFunction": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "funcasync",
    "body": [
      "const ${1} = async () => {",
      "try {",
      "}",
      "catch(error) {",
      "console.log(`[${1}] - error: \\${error\\}`)",
      "}}"
    ]
  },

  "asyncFunctionpParams": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "funcasyncparams",
    "body": [
      "interface ${1/(.*)/${1:/capitalize}/} {",
      "${2}",
      "}",
      "const ${1} = async (params: ${1/(.*)/${1:/capitalize}/}) => {",
      "const {${3}} = params;\n",
      "try {",
      "}",
      "catch(error) {",
      "console.log(`[${1}] - error: \\${error\\}`)",
      "}}"
    ]
  }
}
